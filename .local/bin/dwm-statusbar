#!/bin/bash

# In order to understand the different colors used and use of carets, take a look at status2d patch of dwm

network_speed(){
  speed="$(awk '{i++; recv[i]=$1; trans[i]=$2}; END{printf("%.0f %.0f ", (recv[2]-recv[1])/1024 ,(trans[2]-trans[1])/1024)}' <(cat /proc/net/dev | grep wlp0s20u2u3 | awk -F' ' '{print $2 " " $10}'; sleep 1; cat /proc/net/dev | grep wlp0s20u2u3 | awk -F' ' '{print $2 " " $10}'))"
  echo -ne "$speed" 
}

network_speed_new() {
  INTERFACE=wlp0s20u2u3 
  while :
  do
    awk '{
    if (rx) {
      printf ("  %.0f    %.0f\n", ($2-rx)/1024, ($10-tx)/1024)
    } else {
      rx=$2; tx=$10;
    }
  }' \
      <(grep $INTERFACE /proc/net/dev) \
      <(sleep 1; grep $INTERFACE /proc/net/dev)
    sleep 2;
  done
}

print_power() {
  status="$(cat /sys/class/power_supply/AC/online)"
  battery="$(cat /sys/class/power_supply/BAT0/capacity)"
  timer="$(acpi -b | grep "Battery" | awk '{print $5}' | cut -c 1-5)"
  if [ "${status}" == 1 ]; then
    echo -ne "^d^ ^b#f4e6e2^^c#1d2021^ Batt: ^b#ffffff^ ${battery}% ^c#fabd2f^ "
    if [ "${battery}" == 96 ]; then
      cmd="notify-send 'Battery Almost Full' 'Battery is ${battery}%, You can unplug the charger'"
      eval $cmd
    fi
  else
    echo -ne "^d^ ^b#cc241d^^c#1d2021^ Batt:^b#fb4934^ ${battery}% "
    if [ "$battery" -eq 5 ]; then
      cmd="notify-send -u critical 'Battery Critically Low' 'Suspending the machine in 5 seconds'"
      eval $cmd
      sleep 5
      cmd="loginctl suspend"
      eval $cmd
    elif [ "$battery" -eq 15 ]; then
      cmd="notify-send -u critical 'Battery Low' 'Battery remain ${battery}%, Please recharge'"
      eval $cmd
    elif [ "$battery" -eq 25 ]; then
      cmd="notify-send -u low 'Battery Low' 'Battery remain ${battery}%, Please recharge'"
      eval $cmd
    fi
  fi
}

print_ram() {
	mem_used=$(free -h | awk '/Mem:/ { print $3 }' | cut -f1 -d 'i')
	mem_free=$(free -h | awk '/Mem:/ { print $2 }' | cut -f1 -d 'i')
	echo  -ne "^d^ ^b#689d6a^^c#1d2021^   ^b#8ec07c^ ${mem_used}/${mem_free} "
}


# print_wifiqual() {
#  wifiessid="$(/sbin/iwconfig 2>/dev/null | awk '/wlp0s20u2u3/' | grep ESSID | cut -d: -f2)"
#  wifiawk="$(echo $wifiessid | awk -F',' '{gsub(/"/, "", $1); print $1}')"
#  wificut="$(echo $wifiawk | cut -d' ' -f1)"
# echo -ne "^d^ ^b#d79921^^c#1d2021^  ^b#fabd2f^ ${wificut}"
# }

print_wifiqual() {
    wifissid="$(iw dev wlp0s20u2u3 link | grep -i ssid | awk '{print $2}')"
    echo -ne "^d^ ^b#d79921^^c#ffffff^   ^c#1d2021^^b#fabd2f^ ${wifissid}"
}


print_hddfree() {
  hddfree="$(df -Ph /dev/disk/by-uuid/8303ddb4-73cf-4c08-8709-3eaa0c9843b6 | awk '$3 ~ /[0-9]+/ {print $4}')"
  echo -ne "^d^ ^b#458588^^c#1d2021^   / ^b#83a598^ ${hddfree} "
}

print_volume(){
    mix=`amixer get Master | tail -1`
    vol="$(amixer get Master | tail -n1 | sed -r 's/.*\[(.*)%\].*/\1/')"
    if [[ $mix == *\[off\]* ]]; then
      #red 2                                                
      echo -e "^d^ ^b#689d6a^^c#1d2021^  ^b#8ec07c^ "
    elif [[ $mix == *\[on\]* ]]; then
      #green 9
      echo -e  "^d^ ^b#689d6a^^c#1d2021^   ^b#8ec07c^ ${vol}% "
    else
      #yellow6
      echo -e "^d^ ^b#689d6a^^c#1d2021^  ^b#8ec07c^ "
    fi
}

print_volume_pulseaudio() { 
  is_mute="$(pamixer --get-mute)"
	volume="$(pamixer --get-volume)"
  if [ "$is_mute" = "true" ]; then
    echo -e "^d^ ^b#689d6a^^c#1d2021^  ^b#8ec07c^ "
  else
    echo -e  "^d^ ^b#689d6a^^c#1d2021^   ^b#8ec07c^ ${volume}% "
  fi
}

print_brightness() {
  brightness="$(xbacklight -get | sed 's/\.[0-9]*$//')"
	echo -ne  "^d^ ^b#ffffff^^c#1d2021^   ^b#f4e6e2^ ${brightness} "
}

print_datetime() {
  dateonly="$(date "+%a, %d %b")"
  timeonly="$(date "+%I:%M%p")"
  echo -ne "^d^ ^b#458588^^c#1d2021^   ^b#83a598^ ${dateonly} ^d^ ^b#689d6a^^c#1d2021^   ^b#8ec07c^ ${timeonly} "
}

print_cputemp() {
    cputemp="$(sensors|awk 'BEGIN{i=0;t=0;b=0}/id [0-9]/{b=$4};/Core/{++i;t+=$3}END{if(i>0){printf("%0.1f\n",t/i)}else{sub(/[^0-9.]/,"",b);print b}}')"
    echo -ne "^d^ ^b#cc241d^^c#1d2021^  ^b#fb4934^ ${cputemp} °C "

}

# cpu (from: https://bbs.archlinux.org/viewtopic.php?pid=661641#p661641)

while true; do
  # get new cpu idle and total usage
  eval $(awk '/^cpu /{print "cpu_idle_now=" $5 "; cpu_total_now=" $2+$3+$4+$5 }' /proc/stat)
  cpu_interval=$((cpu_total_now-${cpu_total_old:-0}))
  # calculate cpu usage (%)
  let cpu_used="100 * ($cpu_interval - ($cpu_idle_now-${cpu_idle_old:-0})) / $cpu_interval"

  # output vars
  print_cpu_used() {
    printf "%-1b" "^d^ ^b#98971a^^c#1d2021^   ^b#b8bb26^ ${cpu_used}% "
    #"%-10b" "${color7}CPU:${cpu_used}%"
  }
 
  # Pipe to status bar, not indented due to printing extra spaces/tabs
  xsetroot -name "$(print_cpu_used)$(print_cputemp)$(print_ram)$(print_brightness)$(print_wifiqual) $(network_speed)$(print_hddfree)$(print_volume_pulseaudio)$(print_power)$(print_datetime)"

  # reset old rates
  cpu_idle_old=$cpu_idle_now
  cpu_total_old=$cpu_total_now
  # loop stats every 10 second
  sleep 60
 done
